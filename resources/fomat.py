# format files from ndisasm

file_path = "/media/seethathuman/data/PycharmProjects/x86-test/resources/dos_3_ndisasm.asm"
new_file_path = "/media/seethathuman/data/PycharmProjects/x86-test/asm/dos_2_ndisasm.asm"

new_file = ["; Generated by ndisasm\n"]
with open(file_path) as f:
    orig_file = f.readlines()

print(f"Processing {len(orig_file)} lines from {file_path}...")
subroutines = set()
in_routine = False
routines = not True
max_address = 512
lines = 0

# 00000000  EB28              jmp short 0x2a
for line in orig_file:
    lines += 1
    address = "0x" + line[:8].lstrip("0")
    if address == "0x": address = "0x0"
    opcode = line[10:28].strip()
    instruction = line[28:].strip()
    if int(address, 16) > max_address:
        break
    address = hex(int(address, 16) + 0x37)
    if address.lower() in subroutines and routines:
        in_routine = True
        new_file.append(f"sub_{address[2:].lower()}:\n")

    if instruction.startswith("call") and routines:
        try:
            subroutine_address = hex(int(instruction.split(" ")[1], 16) + int(address, 16))
            subroutines.add(subroutine_address)
            instruction = "call sub_" + subroutine_address[2:]
        except ValueError:
            pass

    elif instruction.startswith("ret") and in_routine and routines:
        in_routine = False
        new_file.append("    ")

    elif instruction.startswith("jmp short") and routines:
        try:
            subroutine_address = hex(int(instruction.split(" ")[2], 16) + int(address, 16))
            subroutines.add(subroutine_address)
            instruction = "jmp sub_" + subroutine_address[2:]
        except ValueError:
            pass
    elif instruction.startswith("bytes"):
        continue
    if lines % 10000 == 0:
        print(f"Processing line {lines}/{len(orig_file)}...")

    new_line = f"{" " * 4 * in_routine} {instruction} {" " * (29 - len(instruction))};[{address}] {opcode}\n"
    new_file.append(new_line)

with open(new_file_path, "w") as f:
    f.writelines(new_file)
